AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  event-driven Sample SAM Template for event-driven
  
Globals:
  Function:
    Timeout: 30
    Runtime: nodejs20.x

Resources:
  ProductLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.loadProducts
      CodeUri: hello-world
      Description: Lambda function for all product endpoints
      Architectures:
      - x86_64
      Policies:
        - AmazonDynamoDBFullAccess
      Events:
        LoadProductPath:
          Type: Api
          Properties:
            Path: /loadProducts
            Method: POST
            RestApiId: !Ref EcommerceRESTAPI
        
  GetProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello-world/
      Handler: getproduct.getProduct
      Policies: [AmazonDynamoDBFullAccess]
      Events:
        FetchTodos:
          Type: Api
          Properties:
            Path: /products/{product_id}
            Method: get
            RestApiId: !Ref EcommerceRESTAPI

  GetallProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello-world/
      Handler: getallproducts.getProducts
      Policies: [AmazonDynamoDBFullAccess]
      Events:
        GetAllProducts:
          Type: Api
          Properties:
            Path: /products
            Method: get
            RestApiId: !Ref EcommerceRESTAPI

  OrderLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Lambda function with cart and order endpoints'
      CodeUri: hello-world/
      Handler: addtocart.addToCart
      Events:
        addToCartPath:
          Type: Api
          Properties:
            Path: /cart/{user_id}
            Method: POST
            RestApiId: !Ref EcommerceRESTAPI
  
  GetCartFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Lambda function to get cart items'
      CodeUri: hello-world/
      Handler: getallcartsproducts.getCart
      Policies:
        - AmazonDynamoDBReadOnlyAccess
        - AmazonSQSFullAccess
      Events:
        GetCartPath:
          Type: Api
          Properties:
            Path: /cart/{user_id}
            Method: GET
            RestApiId: !Ref EcommerceRESTAPI
            
  


  PlaceOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello-world/
      Handler: placeorder.placeOrder
      Runtime: nodejs20.x
      Policies:
        - AmazonDynamoDBFullAccess
        - Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:GetRecords"
                - "dynamodb:GetShardIterator"
                - "dynamodb:DescribeStream"
                - "dynamodb:ListStreams"
              Resource: !GetAtt ProductTable.StreamArn
      Events:
        OrderPath:
          Type: Api
          Properties:
            Path: /order
            Method: POST
            RestApiId: !Ref EcommerceRESTAPI
   
  
  ProcessCartProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: process_cart_products.handler
      CodeUri: hello-world/
      Description: Lambda function listens to dynamodb streams, gets order and sends order to sqs
      Architectures:
      - x86_64
      Policies:
        - DynamoDBStreamReadPolicy:
            TableName: !Ref ProductTable
            StreamName: !Select [3, !Split ["/", !GetAtt ProductTable.StreamArn]]
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt ProductTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1



  EventSourceDDBTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      FilterCriteria:
        Filters:
          - Pattern: '{ "dynamodb": { "NewImage": { "order_status": { "S": ["ORDERED"] } } } }'
      EventSourceArn: !GetAtt ProductTable.StreamArn
      FunctionName: !GetAtt ProcessCartProductsFunction.Arn
      StartingPosition: LATEST



  UpdateCartProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update_cart_products.lambda_handler
      CodeUri: hello-world/
      Description: Lambda function pulls the sqs queue messages and processes the order items
      Architectures:
      - x86_64
      Policies:
        - AmazonSQSFullAccess
        - AmazonDynamoDBFullAccess
      Events:
        RetrieveFromSQS:
          Type: SQS
          Properties:
            Queue: !GetAtt UpdateCartProductsSQS.Arn
            BatchSize: 5
            FunctionResponseTypes:
              - ReportBatchItemFailures

    

  UpdateCartProductsSQS:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt UpdateCartProductsDLQ.Arn
        maxReceiveCount: 5
  UpdateCartProductsDLQ:
    Type: AWS::SQS::Queue





    
  EcommerceRESTAPI:
    Type: AWS::Serverless::Api
    Properties:
      Description: ecommerce api Optional --> with api-key authentication
      Name: EcommerceRESTAPI
      StageName: Dev
  RESTAPIRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'

      Policies:
      - PolicyName: AllowCWIntegration
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:DescribeLogGroups'
                - 'logs:DescribeLogStreams'
                - 'logs:PutLogEvents'
                - 'logs:GetLogEvents'
                - 'logs:FilterLogEvents'
              Resource: '*'



  ProductTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: userOrders
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: orderProducts
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
  



Outputs:
  EcommerceRESTAPI:
    Description: "API Gateway endpoint URL for Prod stage for Product Lambda function"
    Value: !Sub "https://${EcommerceRESTAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/loadProducts/"
  ProductLambdaFunction:
    Description: "Product Lambda Function ARN"
    Value: !GetAtt ProductLambdaFunction.Arn
  RESTAPIRole:
    Description: "Implicit IAM Role created for Product Lambda function"
    Value: !GetAtt RESTAPIRole.Arn